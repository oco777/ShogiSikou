//
//  KomaInf.h
//  MySampleProject
//
//  Created by 小森久 on 2014/06/11.
//
//

#ifndef __MySampleProject__KomaInf__
#define __MySampleProject__KomaInf__

typedef unsigned char KomaInf;
typedef unsigned char KomaPos;
typedef unsigned char Teban;
typedef unsigned char UseAI;
typedef unsigned int Kiki;

enum {
	EMPTY = 0,
	EMP = EMPTY,
	PROMOTED = 1<<3,
	SELF = 1<<4,
	ENEMY = 1<<5,
	WALL = SELF+ENEMY,
	FU = 1,
	KY = 2,
	KE = 3,
	GI = 4,
	KI = 5,
	KA = 6,
	HI = 7,
	OU = 8,
	TO = FU+PROMOTED,
	NY = KY+PROMOTED,
	NK = KE+PROMOTED,
	NG = GI+PROMOTED,
	UM = KA+PROMOTED,
	RY = HI+PROMOTED,
	
	SFU = SELF+FU,
	SKY = SELF+KY,
	SKE = SELF+KE,
	SGI = SELF+GI,
	SKI = SELF+KI,
	SKA = SELF+KA,
	SHI = SELF+HI,
	SOU = SELF+OU,
	STO = SELF+TO,
	SNY = SELF+NY,
	SNK = SELF+NK,
	SNG = SELF+NG,
	SUM = SELF+UM,
	SRY = SELF+RY,
	
	EFU = ENEMY+FU,
	EKY = ENEMY+KY,
	EKE = ENEMY+KE,
	EGI = ENEMY+GI,
	EKI = ENEMY+KI,
	EKA = ENEMY+KA,
	EHI = ENEMY+HI,
	EOU = ENEMY+OU,
	ETO = ENEMY+TO,
	ENY = ENEMY+NY,
	ENK = ENEMY+NK,
	ENG = ENEMY+NG,
	EUM = ENEMY+UM,
	ERY = ENEMY+RY,
};

enum {
	DIRECT_LEFT_DOWN,
	DIRECT_DOWN,
	DIRECT_RIGHT_DOWN,
	DIRECT_LEFT,
	DIRECT_RIGHT,
	DIRECT_LEFT_UP,
	DIRECT_UP,
	DIRECT_RIGHT_UP,
	DIRECT_SKE_1,
	DIRECT_SKE_2,
	DIRECT_EKE_1,
	DIRECT_EKE_2,
	DIRECT_NUM
};
#define DIRECT_START	DIRECT_LEFT_DOWN
#define DIRECT_NUM_FOR_PIN	(DIRECT_RIGHT_UP+1)

enum {
	KIKI_MOVE_LEFT_DOWN		= (1<<DIRECT_LEFT_DOWN),
	KIKI_MOVE_DOWN			= (1<<DIRECT_DOWN),
	KIKI_MOVE_RIGHT_DOWN	= (1<<DIRECT_RIGHT_DOWN),
	KIKI_MOVE_LEFT			= (1<<DIRECT_LEFT),
	KIKI_MOVE_RIGHT			= (1<<DIRECT_RIGHT),
	KIKI_MOVE_LEFT_UP		= (1<<DIRECT_LEFT_UP),
	KIKI_MOVE_UP			= (1<<DIRECT_UP),
	KIKI_MOVE_RIGHT_UP		= (1<<DIRECT_RIGHT_UP),
	KIKI_MOVE_SKE_1			= (1<<DIRECT_SKE_1),
	KIKI_MOVE_SKE_2			= (1<<DIRECT_SKE_2),
	KIKI_MOVE_EKE_1			= (1<<DIRECT_EKE_1),
	KIKI_MOVE_EKE_2			= (1<<DIRECT_EKE_2),
	
	KIKI_JUMP_OFFSET		= 16,
	KIKI_JUMP_LEFT_DOWN		= (1<<(DIRECT_LEFT_DOWN+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_DOWN			= (1<<(DIRECT_DOWN+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_RIGHT_DOWN	= (1<<(DIRECT_RIGHT_DOWN+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_LEFT			= (1<<(DIRECT_LEFT+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_RIGHT			= (1<<(DIRECT_RIGHT+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_LEFT_UP		= (1<<(DIRECT_LEFT_UP+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_UP			= (1<<(DIRECT_UP+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_RIGHT_UP		= (1<<(DIRECT_RIGHT_UP+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_SKE_1			= (1<<(DIRECT_SKE_1+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_SKE_2			= (1<<(DIRECT_SKE_2+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_EKE_1			= (1<<(DIRECT_EKE_1+KIKI_JUMP_OFFSET)),
	KIKI_JUMP_EKE_2			= (1<<(DIRECT_EKE_2+KIKI_JUMP_OFFSET)),
};
#define KIKI_MOVE_START		KIKI_MOVE_LEFT_DOWN
#define KIKI_JUMP_START		KIKI_JUMP_LEFT_DOWN


extern int KomaValue[];
extern int HandValue[];
extern int Direct[DIRECT_NUM];
extern int CanPromote[];
extern int CanMove[DIRECT_NUM][64];
extern int CanJump[DIRECT_NUM][64];

#endif /* defined(__MySampleProject__KomaInf__) */
